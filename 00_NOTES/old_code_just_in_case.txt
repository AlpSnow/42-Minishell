
//-----------------------------------//
// Vieux code au cas ou :
//-----------------------------------//


// void    reassign_segment_list_index(t_segment *segment_list)
// {
//     int i;

//     i = 0;
//     while (segment_list != NULL)
//     {
//         segment_list->index = i;
//         i++;
//         segment_list = segment_list->next;
//     }
// }





// t_word_fragments *split_word_into_fragments(const char *str, int *chars_read, int *are_quotes_closed)
// {
//     t_word_fragments *fragment_list;
//     t_word_fragments *fragment;
//     char *fragment_str;
//     int i;
//     int start;
//     int len;
//     t_quote_type quote_type;

//     i = 0;
//     fragment_list = NULL;
//     while (str[i] != '\0' && is_separator(str[i]) == 0)
//     {
//         start = i;
//         len = 0;
//         quote_type = QUOTE_NONE;
//         if (str[i] == '\'' || str[i] == '\"')
//         {
//             if (str[i] == '\'')
//                 quote_type = QUOTE_SINGLE;
//             else
//                 quote_type = QUOTE_DOUBLE;
//             i++;
//             start = i;
//             while (str[i] != '\0' && ((quote_type == QUOTE_SINGLE && str[i] != '\'') ||
//                               (quote_type == QUOTE_DOUBLE && str[i] != '\"')))
//                 i++;
//             if (str[i] == '\0')
//             {
//                 *are_quotes_closed = -1;
//                 free_word_fragments(fragment_list);
//                 fragment_list = NULL;
//                 break;
//             }
//             len = i - start;
//             i++;
//         }
//         else
//         {
//             while (str[i] != '\0' && is_separator(str[i]) == 0 && str[i] != '\'' && str[i] != '\"')
//                 i++;
//             len = i - start;
//         }
//         fragment_str = ft_strndup(str + start, len);
//         if (fragment_str == NULL)
//         {
//             free_word_fragments(fragment_list);
//             return (NULL);
//         }
//         fragment = create_fragment(fragment_str, quote_type);
//         if (fragment == NULL)
//         {
//             free(fragment_str);
// 	        free_word_fragments(fragment_list);
// 	        return (NULL);
//         }
//         fragment_add_back(&fragment_list, fragment);
//     }
//     *chars_read = i;
//     return (fragment_list);
// }







Expand : 



// char  *expand_env_variables(char *full_str, t_data *data, int *status_code)
// {
//     int     i;
//     int     start;
//     char    *str;
//     char    *new_full_str;
//     char    *tmp;

//     i = 0;
//     start = 0;
//     str = NULL;
 
//     if (full_str == NULL)
//     {
//         *status_code = 99;
//         return (NULL);
//     }
//     new_full_str = ft_strdup("");
//     if (new_full_str == NULL)
//     {
//         *status_code = 2;
//         return (NULL);
//     }
//     while (full_str[i] != '\0')
//     {
//         if (full_str[i] == '$' && full_str[i + 1] == '{')
//         {
//             i = i + 2;
//             start = i;
//             while (full_str[i] != '\0' && full_str[i] != '}')
//                 i++;
//             if (full_str[i] != '}')
//             {
//                 write(2, ERROR_MISSING_BRACE, 41);
//                 free(new_full_str);
//                 *status_code = 1;
//                 data->last_exit_status = 2;
//                 return (NULL);
//             }
//             str = ft_strndup(full_str + start, i - start);

//             if (str == NULL)
//             {
//                 free(new_full_str);
//                 *status_code = 2;
//                 return (NULL);
//             }
//             i++;

//             if (ft_strcmp(str, "?") == 0)
//             {
//                 tmp = ft_itoa(data->last_exit_status);
//                 if (tmp == NULL)
//                 {
//                     free(str);
//                     free(new_full_str);
//                     *status_code = 2;
//                     return (NULL);
//                 }
//             }
//             else if (ft_strcmp(str, "$") == 0)
//             {
//                 write (2, ERROR_PID_EXPAND, 64);
//                 free(str);
//                 free(new_full_str);
//                 *status_code = 1;
//                 data->last_exit_status = 127;
//                 return (NULL);
//             }

//             else if (is_valid_brace_expansion_syntax(str) == 0)
//             {
//                 write(2, "minishell: ${", 13);
//                 write(2, str, ft_strlen(str));
//                 write(2, "}: bad substitution\n", 21);
//                 free(str);
//                 free(new_full_str);
//                 *status_code = 1;
//                 data->last_exit_status = 1;
//                 return (NULL);
//             }
//             else
//             {
//                 tmp = get_env(str, data->env);
//                 if (tmp == NULL)
//                 {
//                     tmp = ft_strdup("");
//                     if (tmp == NULL)
//                     {
//                         free(str);
//                         free(new_full_str);
//                         *status_code = 2;
//                         return (NULL);
//                     }
//                 }
//                 else
//                 {
//                     tmp = ft_strdup(tmp);
//                     if (tmp == NULL)
//                     {
//                         free(str);
//                         free(new_full_str);
//                         *status_code = 2;
//                         return (NULL);
//                     }
//                 }
//             }
//             free(str);
//             str = strjoin_safe(new_full_str, tmp);
//             free(new_full_str);
//             free(tmp);

//             if (str == NULL)
//             {
//                 *status_code = 2;
//                 return (NULL);
//             }
//             new_full_str = str;
//         }
//         else if (full_str[i] == '$')
//         {
//             i++;

//             if (full_str[i] == '?') 
//             {
//                 tmp = ft_itoa(data->last_exit_status);

//                 if (tmp == NULL)
//                 {
//                     free(new_full_str);
//                     *status_code = 2;
//                     return (NULL);
//                 }
//                 str = strjoin_safe(new_full_str, tmp);
//                 free(tmp);
//                 free(new_full_str);

//                 if (str == NULL)
//                 {
//                     *status_code = 2;
//                     return (NULL);
//                 }
//                 new_full_str = str;
//                 i++;
//             } 
//             else if (full_str[i] == '$') 
//             {   
//                 write (2, ERROR_PID_EXPAND, 64);
//                 free(new_full_str);
//                 *status_code = 1;
//                 data->last_exit_status = 127;
//                 return (NULL);
//             }
//             else if (ft_isdigit(full_str[i]) == 1)
//             {
//                 char number[2];
                
//                 number[0] = full_str[i];
//                 number[1] = '\0';
//                 tmp = get_env(number, data->env);
//                 i++;


//                 if (tmp == NULL)
//                 {
//                     tmp = ft_strdup("");
//                     if (tmp == NULL)
//                     {
//                         free(new_full_str);
//                         *status_code = 2;
//                         return (NULL);
//                     }
//                     str = strjoin_safe(new_full_str, tmp);
//                     free(tmp);
//                     if (str == NULL)
//                     {
//                         free(new_full_str);
//                         *status_code = 2;
//                         return (NULL);
//                     }
//                 }
//                 else 
//                 {
//                     str = strjoin_safe(new_full_str, tmp);
//                     if (str == NULL)
//                     {
//                         free(new_full_str);
//                         *status_code = 2;
//                         return (NULL);
//                     }
//                 }
//                 free(new_full_str);
//                 new_full_str = str;
//             }
//             else if (full_str[i] == '\0' || (ft_isalnum(full_str[i]) == 0 && full_str[i] != '_'))
//             {
//                 tmp = ft_strdup("$");
//                 if (tmp == NULL)
//                 {
//                     free(new_full_str);
//                     *status_code = 2;
//                     return (NULL);
//                 }
//                 str = strjoin_safe(new_full_str, tmp);
//                 free(tmp);
//                 free(new_full_str);
//                 if (str == NULL)
//                 {
//                     *status_code = 2;
//                     return (NULL);
//                 }
//                 new_full_str = str;
//             }
//             else 
//             {
//                 start = i;
//                 while (full_str[i] != '\0' && (ft_isalnum(full_str[i]) == 1 || full_str[i] == '_'))
//                     i++;
//                 str = ft_strndup(full_str + start, i - start);
//                 if (str == NULL)
//                 {
//                     free(new_full_str);
//                     *status_code = 2;
//                     return (NULL);
//                 }
//                 tmp = get_env(str, data->env);
//                 free(str);
//                 if (tmp == NULL)
//                 {
//                     tmp = ft_strdup("");
//                     if (tmp == NULL)
//                     {
//                         free(new_full_str);
//                         *status_code = 2;
//                         return (NULL);
//                     }
//                     str = strjoin_safe(new_full_str, tmp);
//                     free(tmp);
//                     if (str == NULL)
//                     {
//                         free(new_full_str);
//                         *status_code = 2;
//                         return (NULL);
//                     }
//                 }
//                 else
//                 {
//                     str = strjoin_safe(new_full_str, tmp);
//                     if (str == NULL)
//                     {
//                         free(new_full_str);
//                         *status_code = 2;
//                         return (NULL);
//                     }
//                 }
//                 free(new_full_str);
//                 new_full_str = str;
//             }
//         }
//         else 
//         {
//             start = i;
//             while (full_str[i] != '\0' && full_str[i] != '$')
//                 i++;
//             str = ft_strndup(full_str + start, i - start);

//             if (str == NULL)
//             {
//                 free(new_full_str);
//                 *status_code = 2;
//                 return (NULL);
//             }
//             tmp = strjoin_safe(new_full_str, str);
//             free(new_full_str);
//             free(str);

//             if (tmp == NULL)
//             {
//                 *status_code = 2;
//                 return (NULL);
//             }
//             new_full_str = tmp;
//         }
//     }
//     return (new_full_str);
// }


// int    apply_env_expansion(t_segment	*segment_list, t_data *data)
// {
//     t_segment	*segment_head;
//     t_word_fragments *current;
//     char *expand_str;
//     int status_code;
        
//     status_code = 0;
//     segment_head = segment_list;
//     while (segment_list != NULL)
//     {
//         if (segment_list->type == WORD)
//         {
//             current = segment_list->content;
//             while (current != NULL)
//             {
//                 if (current->quote_type == QUOTE_NONE ||
//                     current->quote_type == QUOTE_DOUBLE)
//                 {
//                     expand_str = expand_env_variables(current->str, data, &status_code);
//                     if (expand_str == NULL && status_code == 1)
//                     {
//                         free_segment_list(&segment_head);
//                         return (1);
//                     }
//                     else if (expand_str == NULL && status_code == 2)
//                     {
//                         write(2, ERROR_EXPAND_MALLOC, 76);
//                         free_segment_list(&segment_head);
//                         rl_clear_history();
//                         free_tab(data->env);
//                         exit (1);
//                     }
//                     else if (expand_str == NULL && status_code == 99)
//                     {
//                         write (2, ERROR_INTERNAL_NULL_EXPAND, 76);
//                         free_segment_list(&segment_head);
//                         rl_clear_history();
//                         free_tab(data->env);
//                         exit (99);
//                     }
//                     char *new_str = ft_strdup(expand_str);
//                     if (new_str == NULL)
//                     {
//                         free(expand_str);
//                         free_segment_list(&segment_head);
//                         rl_clear_history();
//                         free_tab(data->env);
//                         exit (1);
//                     }
//                     free(current->str);
//                     current->str = new_str;
//                     free(expand_str);
//                 }
//                 current = current->next;
//             }
//         }
//         segment_list = segment_list->next;
//     }
//     return (0);
// }





// t_segment	*lexer(char *input_line, t_data *data)
// {
// 	t_segment	*segment_list;
// 	t_segment	*segment_end;
// 	char		*origin;
// 	int			i;

// 	origin = input_line;
// 	segment_list = NULL;
// 	segment_end = NULL;
// 	i = 0;
// 	while (input_line[i] != '\0')
// 	{
// 		i += skip_white_space(&input_line[i]);
// 		if (input_line[i] == '\0')
// 			break ;
// 		if (input_line[i] == '|' || input_line[i] == '<' || input_line[i] == '>')
// 			i += add_operator_segment(&input_line[i], &segment_list, origin, data);
// 		else
// 			i += add_word_segment(&input_line[i], &segment_list, origin, data);
// 	}
// 	segment_end = create_segment();
// 	if (segment_end == NULL)
// 		lexer_error_exit(origin, &segment_list, data);
// 	segment_end->type = END_OF_FILE;
// 	segment_add_back(&segment_list, segment_end);
// 	return (segment_list);
// }












// static int  contains_white_space(char *str)
// {
//     int i;

//     i = 0;
// 	while (str[i] != '\0')
// 	{
// 		if (str[i] == ' ' || str[i] == '\t' || str[i] == '\n'
//             || str[i]== '\v' || str[i] == '\f' || str[i] == '\r')
//         {
//             return (1);
//         }
// 		i++;
// 	}
// 	return (0);
// }

// static void syntax_error_exit(t_segment **segment_list, t_data *data)
// {
// 	write(2, ERROR_SYNTAX, ft_strlen(ERROR_SYNTAX));
// 	free_segment_list(segment_list);
// 	rl_clear_history();
// 	free_tab(data->env);
// 	exit(1);
// }

// static char *assemble_fragments(t_word_fragments *fragments_list, t_segment **segment_head, t_data *data)
// {
//     char *full_str;
//     char *str;
//     char *tmp;

//     full_str = ft_strdup("");
//     if (full_str == NULL)
//         syntax_error_exit(segment_head, data);
//     while (fragments_list != NULL)
//     {
//         str = ft_strdup(fragments_list->str);
//         if (str == NULL)
//         {
//             free(full_str);
//             syntax_error_exit(segment_head, data);
//         }
//         tmp = full_str;
//         full_str = strjoin_safe(tmp, str);
//         free(tmp);
//         free(str);
//         if (full_str == NULL)
//             syntax_error_exit(segment_head, data);
//         fragments_list = fragments_list->next;
//     }
//     return (full_str);
// }


// static int detect_ambiguous_redirect(t_segment *segment_list, t_segment **segment_head, t_data *data)
// {
//     char    *full_str;
//     char    *str;
//     char    *tmp;

// 	if (!(segment_list->type == INPUT_REDIRECTION || segment_list->type == OUTPUT_REDIRECTION
// 		|| segment_list->type == APPEND || segment_list->type == HEREDOC))
// 		return (0);

// 	if (segment_list->next == NULL || segment_list->next->type != WORD)
// 		return (0);


//     full_str = ft_strdup("");
//     if (full_str == NULL)
//         syntax_error_exit(segment_head, data);

//     while (segment_list->next->type == WORD)
//     {
//         str = assemble_fragments(segment_list->next->content, segment_head, data);

//         tmp = full_str;
//         full_str = strjoin_safe(tmp, str);
//         free(tmp);
//         free(str);
//         if (full_str == NULL)
//             syntax_error_exit(segment_head, data);

//         segment_list = segment_list->next;
//     }

//     if (full_str[0] == '\0' || contains_white_space(full_str) == 1)
//     {
//         write(2, "minishell: ambiguous redirect\n", 30);
//         free(full_str);
//         free_segment_list(segment_head);
//         return (1);
//     }
//     free(full_str);
// 	return (0);

// }




Fonctions norminer au cas le vendredi 09 mai :


expand : 

// static int	env_expansion_apply_to_fragment(t_word_fragments *current, t_data *data, t_segment **head, int is_heredoc)
// {
// 	char	*expand_str;
// 	char	*new_str;
// 	int		status_code;

// 	status_code = 0;
// 	expand_str = perform_env_expansion(current->str, data, &status_code);
// 	if (expand_str == NULL)
// 	{
// 		if (status_code == 1)
// 		{
// 			free_segment_list(head);
// 			return (1);
// 		}
// 		if (is_heredoc == 0)
// 			exit_on_critical_expand_error(status_code, data, head);
// 		else
// 			return (exit_on_critical_expand_error_heredoc(status_code));
// 	}
// 	new_str = ft_strdup(expand_str);
// 	if (new_str == NULL)
// 	{
// 		free(expand_str);
// 		if (is_heredoc == 0)
// 			exit_on_critical_expand_error(2, data, head);
// 		else 
// 			return (exit_on_critical_expand_error_heredoc(2));
// 	}
// 	free(current->str);
// 	current->str = new_str;
// 	free(expand_str);
// 	return (0);
// }



// int	env_expansion_apply(t_segment *segment_list, t_data *data, int is_heredoc)
// {
// 	t_segment			*segment_head;
// 	t_word_fragments	*current;
// 	int					status_code;

// 	segment_head = segment_list;
// 	while (segment_list != NULL)
// 	{
// 		if (is_heredoc_delimiter(segment_list) == 1 && is_heredoc == 0)
// 		{
// 			segment_list = segment_list->next;
// 			continue ;
// 		}
// 		if (segment_list->type == WORD)
// 		{
// 			current = segment_list->content;
// 			while (current != NULL)
// 			{
// 				status_code = apply_expansion_if_needed(current, data, &segment_head, is_heredoc);
// 				if (status_code == 1)
// 					return (1);
// 				else if (status_code == 2 || status_code == 99)
// 					return (2);
// 				current = current->next;
// 			}
// 		}
// 		segment_list = segment_list->next;
// 	}
// 	return (0);
// }


Heredoc : 


// static char	*heredoc_expand_word(char *str, t_data *data, int *status_malloc)
// {
// 	t_word_fragments	*fragment;
// 	t_segment			*segment;
// 	char				*expanded_line;
// 	int					status;

// 	fragment = create_fragment(str, QUOTE_NONE);
// 	if (fragment == NULL)
// 	{
// 		*status_malloc = 2;
// 		return (free(str), NULL);
// 	}
// 	segment = create_segment();
// 	if (segment == NULL)
// 	{
// 		*status_malloc = 2;
// 		free_word_fragments(fragment);
// 		return (NULL);
// 	}
// 	segment->type = WORD;
// 	segment->content = fragment;
// 	status = env_expansion_apply(segment, data, 1);
// 	if (status == 1)
// 	{
// 		*status_malloc = 1;
// 		return (NULL);
// 	}
// 	else if (status == 2)
// 	{
// 		free_word_fragments(fragment);
// 		free(segment);
// 		*status_malloc = 2;
// 		return (NULL);
// 	}
// 	expanded_line = fragment->str;
// 	free(fragment);
// 	free(segment);
// 	return (expanded_line);
// }



// static int	read_and_write_heredoc_lines(int fd, char *delimiter,
// 	t_data *data, int allow_expand)
// {
// 	char	*input_line;
// 	int		status;
// 	int		status_malloc;

// 	while (1)
// 	{
// 		status_malloc = 0;
// 		write(STDOUT_FILENO, "> ", 2);
// 		input_line = heredoc_readline();
// 		status = handle_heredoc_special_cases(input_line, delimiter, fd, data);
// 		if (status == 10)
// 			return (1);
// 		else if (status == 11)
// 			break ;
// 		else if (status == 12)
// 			return (0);
// 		input_line = heredoc_expand_if_needed(input_line, data, allow_expand, &status_malloc);
// 		if (input_line == NULL)
// 		{
// 			g_signal = 0;
// 			get_next_line(STDIN_FILENO, 1);
// 			free(delimiter);
// 			close(fd);
// 			if (status_malloc == 1)
// 				return (1);
// 			else 
// 				return (2);
// 		}
// 		heredoc_write_line(input_line, fd);
// 		free(input_line);
// 	}
// 	return (0);
// }


// static int	heredoc_execute(t_segment *heredoc_segment, t_data *data)
// {
// 	char				*delimiter;
// 	int					fd;
// 	char				*heredoc_path;
// 	int					allow_expand;
// 	struct sigaction	previous_sigaction;
// 	int					status_malloc;

// 	if (extract_delimiter_and_check_heredoc_expansion(heredoc_segment, &delimiter, &allow_expand) == 2)
// 		return (2);
// 	if (create_file_and_store_path_fragment(heredoc_segment, data, &fd, &heredoc_path) == 2)
// 		return (free(delimiter), 2);
// 	disable_echoctl();
// 	set_heredoc_sigint_handler(&previous_sigaction);
// 	status_malloc = read_and_write_heredoc_lines(fd, delimiter, data, allow_expand);
// 	if (status_malloc == 1)
// 	{
// 		enable_echoctl();
// 		sigaction(SIGINT, &previous_sigaction, NULL);
// 		return (1);
// 	}
// 	else if (status_malloc == 2)
// 		return (2);
// 	enable_echoctl();
// 	sigaction(SIGINT, &previous_sigaction, NULL);
// 	get_next_line(STDIN_FILENO, 1);
// 	close(fd);
// 	free(delimiter);
// 	return (0);
// }









Vieux code Heredoc au cas ou :




// static int	heredoc_create_file(int *fd, char **path, t_data *data)
// {
// 	static unsigned long	count = 0;
// 	char		*number;
// 	char		*heredoc_path;

// 	while (count++ < 999)
// 	{
// 		number = ft_itoa(count - 1);
// 		if (number == NULL)
// 			return (1);
// 		heredoc_path = strjoin_safe("/tmp/minishell_heredoc_", number);
// 		free(number);
// 		if (heredoc_path == NULL)
// 			return (1);
// 		*fd = open(heredoc_path, O_CREAT | O_EXCL | O_RDWR, 0600);
// 		if (*fd == -1)
// 		{
// 			free(heredoc_path);
// 			continue;
// 		}
// 		*path = heredoc_path;
// 		heredoc_add_file(heredoc_path, data);
// 		return (0);
// 	}
// 	return (1);
// }









// static int	heredoc_execute(t_segment *heredoc_segment, t_data *data)
// {
// 	t_segment	*delimiter_segments;
// 	char		*delimiter;
// 	int			fd;
// 	char		*heredoc_path;
// 	int			allow_expand;

// 	delimiter_segments = heredoc_segment->next;

// 	delimiter = heredoc_join_fragments(delimiter_segments->content);
// 	if (delimiter == NULL)
// 		return (1);

// 	if (delimiter_segments->are_there_quotes_inside == 1)
// 		allow_expand = 0;
// 	else
// 		allow_expand = 1;


// 	if (heredoc_create_file(&fd, &heredoc_path, data) == 1)
// 		return (free(delimiter), 1);


// 	free_word_fragments(delimiter_segments->content);
// 	delimiter_segments->content = NULL;

// 	delimiter_segments->content = create_fragment(heredoc_path, QUOTE_NONE);
// 	if (delimiter_segments->content == NULL)
// 	{
//     	close(fd);
//     	free(delimiter);
//     	return (1);
// 	}

//     struct sigaction 	previous_sigaction;
// 	struct sigaction	heredoc_sigaction;
//     heredoc_sigaction.sa_handler = heredoc_sigint_handler;
//     sigemptyset(&heredoc_sigaction.sa_mask);
//     heredoc_sigaction.sa_flags = 0;
//     sigaction(SIGINT, &heredoc_sigaction, &previous_sigaction);

// 	while (1)
// 	{
//     	write(STDOUT_FILENO, "> ", 2);
//     	char *input_line = heredoc_readline();

//     	if (input_line == NULL && g_signal == SIGINT)
//     	{
//         	g_signal = 0;
// 			data->last_exit_status = 130;
//         	close(fd);
//         	free(delimiter);
//         	sigaction(SIGINT, &previous_sigaction, NULL);
//         	return (1);
//     	}
// 		if (input_line == NULL)
// 		{
// 			write(2, ERROR_HEREDOC_CTRLD_BEGIN, ft_strlen(ERROR_HEREDOC_CTRLD_BEGIN));
// 			write(2, delimiter, ft_strlen(delimiter));
// 			write(2, ERROR_HEREDOC_CTRLD_END, ft_strlen(ERROR_HEREDOC_CTRLD_END));
//         	break;
// 		}
//     	if (ft_strcmp(input_line, delimiter) == 0)
//     	{
//         	free(input_line);
//         	break;
//     	}
//     	input_line = heredoc_expand_if_needed(input_line, data, allow_expand);


// 		if (input_line == NULL)
// 		{
// 			g_signal = 0;
// 			get_next_line(STDIN_FILENO, 1);
// 			close(fd);
// 			free(delimiter);
// 			sigaction(SIGINT, &previous_sigaction, NULL);
// 			return (1);
// 		}

//     	heredoc_write_line(input_line, fd);
//     	free(input_line);
// 	}
// 	sigaction(SIGINT, &previous_sigaction, NULL);
// 	get_next_line(STDIN_FILENO, 1);
// 	close(fd);
// 	free(delimiter);
// 	return (0);
// }








/*void *ft_realloc(void *ptr, size_t old_size, size_t new_size)
{
    void *new_ptr;
    size_t copy_size;


    if (ptr == NULL)
        return malloc(new_size);


    if (new_size == 0)
    {
        free(ptr);
        return NULL;
    }


    new_ptr = malloc(new_size);
    if (new_ptr == NULL)
        return NULL;



	if (old_size < new_size)
		copy_size = old_size;
	else
		copy_size = new_size;


	// if (new_ptr == NULL || ptr == NULL)
	// 	return NULL;

    ft_memcpy(new_ptr, ptr, copy_size);

    free(ptr);
    return new_ptr;
}



static char *heredoc_readline_manual(void)
{
	char     c;
	char	*tmp;
    char    *line;
    size_t   len;
    ssize_t  read;

	len = 0;
	line = NULL;
    while (1)
    {
        read = read(STDIN_FILENO, &c, 1);

        if (read == -1)
        {
            if (errno == EINTR)
                continue;
            free(line);
            return (NULL);
        }
        if (read == 0)
        {
            if (len == 0)
            {
                free(line);
                return (NULL);
            }
            break ;
        }
        if (c == '\n')
            break ;




        tmp = ft_realloc(line, len, len + 2);
        if (tmp == NULL)
        {
            free(line);
            return (NULL);
        }



        line = tmp;
        line[len++] = c;
        line[len]   = '\0';
    }
    return (line);
}*/








// Au cas ou pour check dans le main :

// static int	parse_and_validate_input(char *input_line, \
// 	t_segment **segment_list, t_data *data)
// {
// if (input_line[0] == '\0')
// return (free(input_line), 1);
// *segment_list = lexer(input_line, data);
// if ((*segment_list)->type == END_OF_FILE)
// {
// free_segment_list(segment_list);
// free(input_line);
// return (1);
// }
// add_history(input_line);
// free(input_line);
// if (validate_syntax(*segment_list, data) == 1)
// return (1);
// if (handle_heredoc(*segment_list, data) == 1)
// {
// heredoc_clean_file(&data->heredoc_files);
// free_segment_list(segment_list);
// return (1);
// }
// if (env_expansion_apply(*segment_list, data, 0) == 1)
// return (heredoc_clean_file(&data->heredoc_files), 1);



// //test temporaire pour tester jusqu'a exit(70)

// // print_segment_list(*segment_list);


// // t_heredoc_file *test = data->heredoc_files;
// // while(test != NULL)
// // {
// // 	write (1, test->path, ft_strlen(test->path));
// // 	test = test->next;
// // }

// // heredoc_clean_file(&data->heredoc_files);
// // free_segment_list(segment_list);
// // rl_clear_history();
// // free_tab(data->env);
// // exit(70);

// return (0);
// }
